#!/usr/bin/env node

/**
 * Module dependencies.
 */
const path = require('path');
const express = require('express');
const db = require('../database'); // Importação correta do 'database.js'
const app = require('../app');
const debug = require('debug')('sisramoficial.0:server');
const http = require('http');

/**
 * Verificação do caminho atual do diretório
 */
console.log('Current directory:', __dirname);
console.log('Expected path for database.js:', path.resolve(__dirname, '../database.js'));

/**
 * Função para normalizar a porta
 */
function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // nome do pipe
    return val;
  }

  if (port >= 0) {
    // número da porta
    return port;
  }

  return false;
}

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */
const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requer privilégios elevados');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' está em uso');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
  console.log('Server is running on port', addr.port);
}
